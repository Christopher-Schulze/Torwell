use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::Mutex;
use torwell84::commands;
use torwell84::error::Error;
use torwell84::secure_http::SecureHttpClient;
use torwell84::session::SessionManager;
use torwell84::state::AppState;
use torwell84::tor_manager::{TorClientBehavior, TorClientConfig, TorManager};

#[derive(Clone, Default)]
struct MockTorClient;

#[async_trait::async_trait]
impl TorClientBehavior for MockTorClient {
    async fn create_bootstrapped(_cfg: TorClientConfig) -> std::result::Result<Self, String> {
        Ok(Self)
    }
    async fn create_bootstrapped_with_progress<P>(
        _cfg: TorClientConfig,
        _progress: &mut P,
    ) -> std::result::Result<Self, String>
    where
        P: FnMut(u8, String) + Send,
    {
        Ok(Self)
    }
    fn reconfigure(&self, _config: &TorClientConfig) -> std::result::Result<(), String> {
        Ok(())
    }
    fn retire_all_circs(&self) {}
    async fn build_new_circuit(&self) -> std::result::Result<(), String> {
        Ok(())
    }
}

fn mock_state() -> AppState<MockTorClient> {
    AppState {
        tor_manager: Arc::new(TorManager::new()),
        http_client: Arc::new(SecureHttpClient::new_default().unwrap()),
        log_file: PathBuf::from("pentest.log"),
        log_lock: Arc::new(Mutex::new(())),
        retry_counter: Arc::new(Mutex::new(0)),
        max_log_lines: Arc::new(Mutex::new(1000)),
        memory_usage: Arc::new(Mutex::new(0)),
        circuit_count: Arc::new(Mutex::new(0)),
        latency_ms: Arc::new(Mutex::new(0)),
        max_memory_mb: 1024,
        max_circuits: 20,
        session: SessionManager::new(std::time::Duration::from_secs(60)),
        app_handle: Arc::new(Mutex::new(None)),
        tray_warning: Arc::new(Mutex::new(None)),
    }
}

#[tokio::test]
async fn pentest_invalid_token_and_rate_limit() {
    let mut app = tauri::test::mock_app();
    let state = mock_state();
    let _ = tokio::fs::remove_file(&state.log_file).await;
    app.manage(state);
    let state = app.state::<AppState<MockTorClient>>();
    let valid = state.create_session().await;

    for _ in 0..5 {
        let res = commands::get_logs(state, "badtoken".into()).await;
        assert!(matches!(res, Err(Error::InvalidToken)));
    }

    let mut last = Ok(Vec::new());
    for _ in 0..65 {
        last = commands::get_logs(state, valid.clone()).await;
    }
    assert!(matches!(last, Err(Error::RateLimitExceeded(_))));
}

#[cfg(feature = "dns_lookup")]
#[tokio::test]
async fn dns_lookup_invalid_and_rate_limit() {
    let mut app = tauri::test::mock_app();
    let state = mock_state();
    app.manage(state);
    let state = app.state::<AppState<MockTorClient>>();
    let token = state.create_session().await;

    let res = commands::dns_lookup(state, token.clone(), "bad host$".into()).await;
    assert!(matches!(res, Err(Error::Io(_))));

    let mut last = Ok(Vec::new());
    for _ in 0..65 {
        last = commands::dns_lookup(state, token.clone(), "localhost".into()).await;
    }
    assert!(matches!(last, Err(Error::RateLimitExceeded(_))));
}

#[cfg(feature = "traceroute")]
#[tokio::test]
async fn traceroute_rate_limited() {
    let mut app = tauri::test::mock_app();
    let state = mock_state();
    app.manage(state);
    let state = app.state::<AppState<MockTorClient>>();
    let token = state.create_session().await;

    let mut last = Ok(Vec::new());
    for _ in 0..65 {
        last = commands::traceroute_host(state, token.clone(), "localhost".into(), Some(1)).await;
    }
    assert!(matches!(last, Err(Error::RateLimitExceeded(_))));
}
