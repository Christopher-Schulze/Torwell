name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual trigger reason'
        required: false

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Setup environment
        run: ./scripts/setup_env.sh
      - name: Run cargo check
        working-directory: src-tauri
        run: cargo check
      - name: Run cargo test
        working-directory: src-tauri
        run: cargo test
      - name: Run http bridge tests
        working-directory: src-tauri
        run: cargo test --features mobile --test http_bridge_tests
        if: runner.os == 'Linux'
        continue-on-error: true
      - name: Run cargo clippy
        working-directory: src-tauri
        run: cargo clippy -- -D warnings
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run cargo audit
        working-directory: src-tauri
        run: cargo audit
      - name: Test service installer
        run: ./scripts/test_service_install.sh

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install
      - name: Setup environment
        run: ./scripts/setup_env.sh
      - run: bun run check
      - name: Run svelte-check
        run: bunx svelte-check
      - run: bun audit
      - run: bun run lint:a11y

  hsm-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install SoftHSM
        run: |
          sudo apt-get update
          sudo apt-get install -y softhsm2
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Run cargo test with HSM
        working-directory: src-tauri
        env:
          TORWELL_HSM_LIB: /usr/lib/softhsm/libsofthsm2.so
          TORWELL_HSM_SLOT: 0
          TORWELL_HSM_PIN: 1234
          TORWELL_HSM_KEY_LABEL: tls-key
          TORWELL_HSM_CERT_LABEL: tls-cert
        run: cargo test --features hsm

  windows-tests:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install WiX Toolset
        run: choco install wixtoolset -y
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install
      - name: Setup environment
        shell: bash
        run: ./scripts/setup_env.sh
      - run: bun run check
      - name: Run svelte-check
        run: bunx svelte-check
      - run: bun run lint:a11y
      - name: Run cargo clippy
        working-directory: src-tauri
        run: cargo clippy -- -D warnings
      - name: Run cargo test
        working-directory: src-tauri
        run: cargo test
      - name: Build MSI
        run: bun run tauri build
      - name: Sign MSI
        env:
          WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERT -and $env:WINDOWS_CERT_PASSWORD) {
            $certPath = "$env:RUNNER_TEMP\cert.pfx"
            [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT))
            signtool sign /f $certPath /p $env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 src-tauri/target/release/bundle/msi/*.msi
          }
      - name: Verify MSI exists
        run: |
          if (!(Test-Path "src-tauri/target/release/bundle/msi")) { exit 1 }
          if (-not (Get-ChildItem -Path src-tauri/target/release/bundle/msi -Filter '*.msi')) { exit 1 }

  bundle:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install WiX Toolset
        if: matrix.os == 'windows-latest'
        run: choco install wixtoolset -y
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install
      - run: bun run tauri build
      - name: Sign MSI
        if: matrix.os == 'windows-latest'
        env:
          WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERT -and $env:WINDOWS_CERT_PASSWORD) {
            $certPath = "$env:RUNNER_TEMP\cert.pfx"
            [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT))
            signtool sign /f $certPath /p $env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 src-tauri/target/release/bundle/msi/*.msi
          }
      - name: Import signing key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [ -n "$GPG_PRIVATE_KEY" ]; then
            echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          fi
      - name: Sign bundles
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          if [ -n "$GPG_PASSPHRASE" ]; then
            find src-tauri/target/release/bundle -type f -not -name '*.asc' -print0 | while IFS= read -r -d '' file; do
              gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -ab "$file"
            done
          fi
      - name: Verify bundles
        shell: bash
        run: |
          test -d src-tauri/target/release/bundle
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ls src-tauri/target/release/bundle/msi/*.msi
            signtool verify /pa src-tauri/target/release/bundle/msi/*.msi
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            ls src-tauri/target/release/bundle/deb/*.deb
            ls src-tauri/target/release/bundle/appimage/*.AppImage
          else
            ls src-tauri/target/release/bundle/dmg/*.dmg
          fi
          if [ -n "$GPG_PASSPHRASE" ]; then
            for asc in $(find src-tauri/target/release/bundle -name '*.asc'); do
              gpg --verify "$asc" "${asc%.asc}"
            done
          fi
      - name: Upload MSI
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: src-tauri/target/release/bundle/msi/*.msi
      - name: Upload DEB
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: src-tauri/target/release/bundle/deb/*.deb
      - name: Upload AppImage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: src-tauri/target/release/bundle/appimage/*.AppImage
      - name: Upload DMG
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: src-tauri/target/release/bundle/dmg/*.dmg

  mobile:
    needs: [backend, frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: android
          - os: macos-latest
            platform: ios
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install
      - run: task mobile:${{ matrix.platform }}
      - name: Validate artifact
        run: ./mobile/scripts/test_artifacts.sh ${{ matrix.platform }}
