name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Install WiX Toolset
        if: matrix.os == 'windows-latest'
        run: choco install wixtoolset -y
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install
      - run: bun run tauri build
      - name: Sign MSI
        if: matrix.os == 'windows-latest'
        env:
          WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERT -and $env:WINDOWS_CERT_PASSWORD) {
            $certPath = "$env:RUNNER_TEMP\cert.pfx"
            [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT))
            signtool sign /f $certPath /p $env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 src-tauri/target/release/bundle/msi/*.msi
          }
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-bundle
          path: src-tauri/target/release/bundle

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Extract version
        id: version
        run: |
          PKG=$(jq -r .version package.json)
          CARGO=$(grep -m1 '^version' src-tauri/Cargo.toml | cut -d '"' -f2)
          if [ "$PKG" != "$CARGO" ]; then
            echo "::error::version mismatch" && exit 1
          fi
          echo "version=$PKG" >> $GITHUB_OUTPUT
      - name: Update changelog
        run: ./scripts/update_changelog.sh
      - name: Commit changelog
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add docs/Changelog.md
          git commit -m "chore: update changelog for ${{ steps.version.outputs.version }}"
          git push
      - name: Import signing key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
      - name: Sign artifacts
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          find dist -type f -not -name '*.asc' -not -name '*.sig' -print0 | while IFS= read -r -d '' file; do
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -ab "$file"
          done
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            See CHANGELOG for details.
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
